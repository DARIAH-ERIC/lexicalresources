<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="../XSLT/XSLTExample.xsl"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Introduction to XSLT: scenarios and examples</title>
            <author>
               <persName>
                  <forename>Laurent</forename>
                  <surname>Romary</surname>
               </persName>
            </author>
         </titleStmt>
         <publicationStmt>
            <authority>
               <persName>
                  <forename>Laurent</forename>
                  <surname>Romary</surname></persName>
            </authority>
            <availability>
               <licence target="http://creativecommons.org/licenses/by/3.0/">
                  <p>The Creative Commons Attribution 3.0 Unported (CC BY 3.0) Licence applies to this document.</p>
               </licence>
            </availability>
         </publicationStmt>
         <sourceDesc>
            <p>Born digital TEI document</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <div>
            <head>General introduction to XSLT</head>
            <list>
               <item>An XML application; a recommendation of the W3C: <ref target="https://www.w3.org/TR/xslt/"><title>XSL Transformations (XSLT)</title> Version 3.0 W3C Recommendation <date>8 June
                        2017</date></ref></item>
               <item>Based on XPath: addressing, selecting, functions</item>
               <item>Core principle: Input + XSLT => Output</item>
               <item>Usual usage: XML + XSLT => XML (e.g. XHTML)</item>
               <item>Other useful usages: <list>
                     <item>XML + XSLT => Text (e.g. generation of CSV outputs)</item>
                     <item>Text + XSLT => XML (e.g. structuring of existing text input)</item>
                  </list>
               </item>
            </list>
         </div>
         <div>
            <head>Making an XSLT stylesheet work</head>
            <div>
               <head>Baseline XSLT structure</head>
               <p>The following example is a complete and workable stylesheet to generate an HTML output from an XML document.</p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs" version="2.0">
                     <xsl:output method="html" encoding="UTF-8"/>
                  </xsl:stylesheet>
               </egXML>
               <p>Linking an XSLT document to an existing XML document in Oxygen: <q>Associate XSLT/CSS stylesheet</q> (green pin).</p>
               <p>Issues:</p>
               <list>
                  <item>The XSLT namespace: <code>http://www.w3.org/1999/XSL/Transform</code></item>
                  <item><gi>xsl:output</gi>: importance of <att>method</att> and <att>encoding</att></item>
                  <item>Default XSLT behaviour: traversal of the XML tree structure (from parent to child) until text nodes are encountered and send to the output stream</item>
                  <item><gi>xsl:template</gi>: intercepting the default behaviour</item>
               </list>
            </div>
            <div>
               <head>Intercepting the default behaviour</head>
               <p>The <gi>xsl:template</gi> element provides a specific behaviour for any node fulfilling the constraint in <att>match</att></p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:template match="entry">
                     <p>
                        <xsl:apply-templates/>
                     </p>
                  </xsl:template>
               </egXML>
               <p>Important: dealing with the namespace of the input document. Two possibilities:</p>
               <list>
                  <item>declaring the namespace with a prefix and using the prefix for all TEI elements: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" xmlns:tei="http://www.tei-c.org/ns/1.0">
                           <xsl:output method="html" encoding="UTF-8"/>
                           <xsl:template match="tei:entry">
                              <p>
                                 <xsl:apply-templates/>
                              </p>
                           </xsl:template>
                        </xsl:stylesheet>
                     </egXML>
                  </item>
                  <item>declaring a default namespace for XPath constructs by means of <att>xpath-default-namespace</att>: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" xpath-default-namespace="http://www.tei-c.org/ns/1.0">
                           <xsl:output method="html" encoding="UTF-8"/>
                           <xsl:template match="entry">
                              <p>
                                 <xsl:apply-templates/>
                              </p>
                           </xsl:template>
                        </xsl:stylesheet>
                     </egXML>
                  </item>
               </list>
               <p>We adopt the latter in the rest of the tutorial.</p>
               <p>Playing with further presentational aspects:</p>
               <list>
                  <item>Headwords in bold: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:template match="orth">
                           <b>
                              <xsl:apply-templates/>
                           </b>
                        </xsl:template>
                     </egXML>
                  </item>
                  <item>Examples in italics (Note: use of constraints in XPath): <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:template match="cit[@type='example']/quote">
                           <i>
                              <xsl:apply-templates/>
                           </i>
                        </xsl:template>
                     </egXML>
                  </item>
                  <item>Putting parentheses around pronunciations: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:template match="pron">
                           <xsl:text>[</xsl:text>
                           <xsl:apply-templates/>
                           <xsl:text>]</xsl:text>
                        </xsl:template>
                     </egXML>
                  </item>
                  <item>Variant: dealing with cases where the pronunciation is already in square brackets: <egXML xmlns="http://www.tei-c.org/ns/Examples">
                        <xsl:template match="pron[not(starts-with(normalize-space(.), '[') and ends-with(normalize-space(.), ']'))]">
                           <xsl:text>[</xsl:text>
                           <xsl:apply-templates/>
                           <xsl:text>]</xsl:text>
                        </xsl:template>
                     </egXML>
                     <list>
                        <item>Logical operators: <code>and</code> and <code>not</code></item>
                        <item>Removing leading and trailing whitespaces with <code>normalize-space()</code></item>
                        <item>String functions in XSLT: <code>start-with()</code> and <code>ends-with()</code></item>
                     </list>
                  </item>
               </list>
               <p>Dealing with senses: presenting sense as a new line, numbering senses when they do not have a <att>n</att> attribute.</p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:template match="sense">
                     <br/>
                     <xsl:choose>
                        <xsl:when test="@n">
                           <xsl:value-of select="@n"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:value-of select="count(preceding-sibling::sense)+1"/>
                        </xsl:otherwise>
                     </xsl:choose>
                     <xsl:text>-</xsl:text>
                     <xsl:apply-templates/>
                  </xsl:template>
               </egXML>
               <p>Main features:</p>
               <list>
                  <item>Using axes: <code>preceding-sibling::*</code></item>
                  <item>Arithmetic functions: <code>count()</code>, <code>+</code></item>
                  <item>Multiple tests using <gi>xsl:choose</gi> (with <gi>xsl:when</gi> and <gi>xsl:otherwise</gi>)</item>
               </list>
            </div>
            <div>
               <head>Intercepting the root element</head>
               <p>Setting up the global structure of the output document and selecting the objects to visualise:</p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:template match="/">
                     <html>
                        <body>
                           <xsl:apply-templates/>
                        </body>
                     </html>
                  </xsl:template>
               </egXML>
               <note>In real life: this is usually the first template to implement.</note>
            </div>
            <div>
               <head>First notions of cherry picking</head>
               <p>Showing the <gi>body</gi> only:</p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:apply-templates select="descendant::body"/>
               </egXML>
               <p>Building up a simple HTML head:</p>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <head>
                     <title>
                        <xsl:apply-templates select="/TEI/teiHeader/fileDesc/titleStmt/title"/>
                     </title>
                  </head>
               </egXML>
               <note>Using oXygen to get the appropriate XPath expression.</note>
            </div>
         </div>
         <div>
            <head>Sorting objects by means of <gi>xsl:sort</gi></head>
            <p>Using <gi>xsl:sort</gi> requires two main elements:</p>
            <list>
               <item>A context that selects a group of nodes to be sorted (e.g. <gi>xsl:apply-templates</gi>)</item>
               <item>A sort key that can be extracted for each node of the group</item>
            </list>
            <p>Sorting all orthographic forms as a header to the output document (e.g. to carry out a diagnosis).</p>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
               <xsl:for-each select="descendant::entry">
                  <xsl:sort select="form[1]/orth[1]" lang="fr"/>
                  <xsl:value-of select="form[1]/orth[1]"/>
                  <xsl:text> - </xsl:text>
               </xsl:for-each>
            </egXML>
         </div>
         <div>
            <head>Dictionary check-ups</head>
            <div>
               <head>Entries without forms</head>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:apply-templates select="descendant::entry[not(form)]"/>
               </egXML>
               <p>XPath and XSLT mechanisms in use:</p>
               <list>
                  <item>Complex XML tree traversal with <gi>xsl:apply-templates</gi></item>
                  <item>Testing the existence of a given child element (Does <gi>entry</gi> contain <gi>form</gi>?)</item>
                  <item>XPtath function: <code>not()</code></item>
               </list>
            </div>
            <div>
               <head>Definition not embedded in a sense</head>
               <note>The TEI lex 0 initiative recommends that all definitions (<gi>def</gi>) are actually part of an encompassing <gi>sense</gi></note>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:apply-templates select="descendant::def[not(ancestor::sense)]/ancestor::entry"/>
               </egXML>
            </div>
            <div>
               <head>Identifying duplicate entries</head>
               <p>Looking for all the different forms in the dictionary and checking those for which there exist more than one entry.</p>
               <p>XPath and XSLT mechanisms in use:</p>
               <list>
                  <item>XPtah function: <code>distinct-values()</code></item>
                  <item>Creating variables with <gi>xsl:variable</gi></item>
                  <item>Iterator XSLT construct: <gi>xsl:for-each</gi></item>
                  <item>Arithmetic operator: <code>count()</code> and <code>&gt;</code></item>
                  <item>Loosing the context node within an iteration (hence the <code>theDictionary</code> variable</item>
               </list>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:variable name="theDictionary" select="/"/>
                  <xsl:for-each select="distinct-values(descendant::entry/form/orth)">
                     <xsl:variable name="theForm" select="."/>
                     <xsl:if test="count($theDictionary/descendant::entry[form/orth = $theForm])>1">
                        <xsl:value-of select="$theForm"/>
                        <xsl:text> - </xsl:text>
                     </xsl:if>
                  </xsl:for-each>
               </egXML>
            </div>
            <div>
               <head>Different words used in definitions</head>
               <p>XPath and XSLT mechanisms in use:</p>
               <list>
                  <item>XPtath iterator: <code>for X in Y return Z</code> with local variables</item>
                  <item>XPath <code>tokenise()</code></item>
                  <item>Practical <att>separator</att> attribute on <gi>xsl:value-of</gi></item>
               </list>
               <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <xsl:variable name="wordsInDef" select="distinct-values(for $i in descendant::def return tokenize($i,' '))"/>
                  <xsl:value-of select="$wordsInDef" separator="; "/>
               </egXML>
            </div>
         </div>
         <div>
            <head>Complementary remarks</head>
            <list>
               <item>Favour a highly modular XSLT programming style to ensure conciseness and ease of maintenance.</item>
               <item>Therefore, always prefer <gi>xsl:apply templates</gi> to <gi>xsl:for-each</gi> when applicable</item>
               <item>When a stylesheet is not working, the main issue is usually a wrongly declared namespace. Pay attention to this when implementing an XML2XML scenario</item>
               <item>Take a regular look at the XPath and XSLT quick references (<ref target="http://www.mulberrytech.com/quickref/"><title>Quick Reference Cards</title> from Mulberry Technologies,
                     Inc.</ref>): be curious to discover new functions, at least to know they exist.</item>
            </list>
         </div>
      </body>
   </text>
</TEI>
